# -*-mode: python; flycheck-mode: nil -*-

import builtins
import argparse
import os
from os.path import basename


############
# SETTINGS #
############


#$PATH.append(r'C:\Program Files\AnyBody Technology\AnyBody.6.1_Beta')
$LS_COLORS='rs=0:di=01;36:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:'



$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
$WIN_UNICODE_CONSOLE = False
$UPDATE_COMPLETIONS_ON_KEYPRES = True
$AUTO_PUSHD = True

$XONSH_HISTORY_SIZE = (10000, 'commands')
$XONSH_HISTORY_BACKEND = 'sqlite'
#$HISTCONTROL = 'ignoredups'


###########
# Aliases #
###########


aliases['rm'] = 'rm -i'
aliases['cp'] = 'cp -i'
aliases['mv'] = 'mv -i'

aliases['grep'] = 'grep -i --color=always'
aliases['mkdir'] = 'mkdir -p'
# aliases['cdpwd'] = 'cd `pwd`'
aliases['d'] = ['cmd', '/c', 'dir']
aliases['npp'] = ['C:/Program Files (x86)/Notepad++/notepad++.exe',  '-multiInst','-nosession']
aliases['ls'] = ['ls','--show-control-chars', '-C', '--color=auto', '-X']


aliases['ll'] = ['ls', '-lh', '-F', '--color=auto', '-vX']
aliases['gl'] = ['git', 'log', '--oneline', '--all' ,'--graph' ,'--decorate' , '--color']
aliases['unpushed'] = ['git', 'log', '--branches', '--not', '--remotes', '--simplify-by-decoration', '--decorate', '--oneline']
aliases['e.'] = ['explorer', '.' ]
aliases['cdgit'] = ['cd', '~/Documents/github/' ]
#aliases['pwd'] = ['$PWD']


aliases['cd..'] = ['cd', '..' ]
aliases['cdd'] = ['cd', '~/Documents']
aliases['cdx'] = ['cd', '~/Documents/xonsh']

aliases['g'] = 'git status -sb'
aliases['gco'] = 'git checkout'
aliases['gp'] = ['git', 'pull']
aliases['gf'] = ['git', 'fetch']


# Typos
aliases['it'] = 'git'
aliases['gi'] = 'git'
aliases['tit'] = 'git'
aliases['sl'] = 'ls'

aliases['last'] = ['git', 'log', '--pretty=format:"%C(yellow)%h%x09%Creset%an%x09%x09%s"', '--decorate', '-10']
aliases['graph'] = "git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --all"
aliases['graph2'] = "git log --graph --all --format=format:'%C(bold yellow)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(bold white)- %an%C(reset)' --abbrev-commit"


# THINGS I TEST
#$FORCE_POSIX_PATHS = True  # Fixes this bug cd 'New Folder/'
$VI_MODE = True


from functools import wraps
from xonsh.contexts import Functor

class CreateAlias(Functor):
    
    def __init__(self, alias_name, args=(), kwargs=None):
        super().__init__(args=args, kwargs=kwargs, rtn='')
        if self.kwargs is None:
            self.kwargs = []
        kw_names = [e[0] for e in self.kwargs]
        if 'stdin' not in kw_names:
            self.kwargs.append(('stdin', None))
        if 'stderr' not in kw_names:
            self.kwargs.append(('stderr', None))
        if 'stdout' not in kw_names:
            self.kwargs.append(('stdout', None))
        self.alias_name = alias_name

    def __exit__(self, exc_type, exc_value, traceback):
        res = super().__exit__(exc_type, exc_value, traceback)
        if not res:
            return res
        builtins.aliases[self.alias_name] = self.func
        return res

with! CreateAlias('sha1', args=['args']):
    import hashlib
    sha = hashlib.sha1()
    with open(args[0], 'rb') as f:
        sha.update(f.read())
    print(sha.hexdigest())

    

def show_style(stylename='default'):
    from xonsh.tools import print_color
    from xonsh.xonfig import _tok_colors

    oldstyle, $XONSH_COLOR_STYLE = $XONSH_COLOR_STYLE, stylename
    s =  builtins.__xonsh_shell__.shell.styler._smap
    print_color(_tok_colors(s,100))
    $XONSH_COLOR_STYLE  = oldstyle

def _sha(args, stdin=None):
    desc = "Calc hash sum of file"
    parser = argparse.ArgumentParser('sha', description=desc)
    parser.add_argument('file', nargs='?', help='File to be hashed')
    parser.add_argument('-a', '--algorithm', default='sha256', help='The hash algorithm used')
    ns = parser.parse_args(args)
    import hashlib
    try:
        sha_algo = getattr(hashlib, ns.algorithm)()
    except AttributeError:
        print(ns.algorithm + ' is not available. Please chose one the following:')
        print(hashlib.algorithms_available)
        return
    with open(args[0], 'rb') as f:
        sha_algo.update(f.read())
    val = sha_algo.hexdigest()
    $(echo.exe -n @(val.strip()) | clip)
    print('{} *{} ({})'.format(val, ns.file, ns.algorithm))

aliases['sha'] = locals().pop('_sha')
    
   

def _devmode(args, stdin=None):
    if len(args) == 1 and args[0] == 'off':
        try:
           $PROMPT, $TITLE, $RIGHT_PROMPT = (
               $_ORG_PROMPT,$_ORG_TITLE,$_ORG_RIGHT_PROMPT)
           cls
        except:
          pass
    else:
        $_ORG_PROMPT,$_ORG_TITLE,$_ORG_RIGHT_PROMPT = (
             $PROMPT, $TITLE, $RIGHT_PROMPT)
        $PROMPT = ('{env_name:{} }{BOLD_GREEN}snail@sea'
                   '{BOLD_BLUE} {cwd}{branch_color}{curr_branch: {}} '
                   '{BOLD_BLUE}\n{prompt_end}{NO_COLOR} ')
        $TITLE = '{current_job:{} | }snail@sea: {cwd} | xonsh'
        $RIGHT_PROMPT = ''
        #$DYNAMIC_CWD_WIDTH = inf
        #cls

aliases['devmode'] = _devmode
del _devmode


$PROMPT_FIELDS['prompt_end'] = lambda : '{RED}$' if __xonsh_history__.last_cmd_rtn else '{BLUE}$'


#####################
# UTILITY FUNCTIONS #
#####################

def _gif_encode(args, stdin=None):  
    desc = "Encode a video as an animated gif file"
    parser = argparse.ArgumentParser('gif-encode', description=desc)
    parser.add_argument('infile', help='The movie to convert to gif')
    parser.add_argument('-o', '--outfile', nargs='?', default=None,
                        help='The output filename')
    parser.add_argument('--width', nargs='?', type=int,  default='-1',
                        help='The width of the animated gif')
    parser.add_argument('--height', nargs='?', type=int,  default='-1',
                        help='The width of the animated gif')
    parser.add_argument('--fps', nargs='?', type=int,  default='30',
                        help='Framerate of the anaimated gif')
    parser.add_argument('--free-aspect', action='store_true', dest='free_aspect',
                        help='Allow the width/height settings to change the aspect ratio.')
    ns = parser.parse_args(args)
    import tempfile
    import os
    filters = 'fps={},scale=w={}:h={}'.format(ns.fps, ns.width, ns.height)
    if not ns.free_aspect:
        filters +=':force_original_aspect_ratio=decrease'
    filters += ':flags=lanczos'
    if ns.outfile is None:
        ns.outfile = os.path.splitext(ns.infile)[0] + '.gif'
    with tempfile.TemporaryDirectory() as tmp:
        palette=os.path.join(tmp, 'palette.png')
        ![ffmpeg.exe -v warning -i @(ns.infile) -vf @(filters+',palettegen=stats_mode=diff') -y @(palette)]
        ![ffmpeg.exe -v warning -i @(ns.infile) -i @(palette) -lavfi @(filters+' [x]; [x][1:v] paletteuse') -y @( ns.outfile)]

 
aliases['gif-encode'] = _gif_encode
del _gif_encode

def _anyscript2python(args, stdin=None):
    import re
    from anypytools import tools
    tools.dump_pattern = re.compile(r'\w+\s?=.+$')
    out = tools.parse_anybodycon_output(args[0])
    gc = globals()
    out.pop('WARNING',None)
    out.pop('ERROR',None)
    gc.update(out)
        
aliases['any2py'] = _anyscript2python
del _anyscript2python

def _pytho2anyscript(args, stdin=None):
    import re
    from anypytools.tools import array2anyscript
    gc = globals()
    var = gc.get(args[0], None)
    if var is not None:
        print(array2anyscript(var))
    else:
        print(args[0] + ' could not be found')
    
        
aliases['py2any'] = _pytho2anyscript
del _pytho2anyscript



$XONSH_SHOW_TRACEBACK = False
$PROMPT = $PROMPT.replace('INTENSE_','').replace('CYAN','BLUE')
$INTENSIFY_COLORS_ON_WIN = False


#$COMPLETIONS_DISPLAY = 'single'
#$COMPLETIONS_MENU_ROWS = 5

#if 'VSCODE_PID' in ${...}:
#    $PROMPT = '{env_name:{} }{BLUE}{cwd}{branch_color}{curr_branch: @{}} {BOLD_BLUE}\n{prompt_end}{NO_COLOR} '

def _light_theme():
    cmd /c color f8

aliases['lt'] = _light_theme
del _light_theme

def _dark_theme():
    cmd /c color 07

aliases['dt'] = _dark_theme
del _dark_theme

devmode



def _docx2rst(args, stdin=None):
    import re
    desc = "Convert docx to rst"
    parser = argparse.ArgumentParser('docx2rst', description=desc)
    parser.add_argument('file', help='The docx file to convert to rst')
    ns = parser.parse_args(args)
    fn = os.path.splitext(ns.file)[0]
    rstfile = fn+'.rst'
    ![pandoc -S -f docx @(ns.file) --track-changes=accept --extract-media @('_static/'+fn) -t rst -o @(rstfile)]
    if os.path.exists('_static/'+ fn+ '/media'):
        ![mv -f @('_static/'+ fn+ '/media/*') -t @('_static/'+fn)]
        ![rm -rf @('_static/'+fn+'/media')]
    with open(rstfile, encoding='utf-8') as file:
        filedata = file.read()
    filedata = filedata.replace('_static/'+fn+'/media', '_static/'+fn)
    filedata = re.sub('^\|\s', ' ' , filedata, flags=re.MULTILINE)
    indent = False
    lines = []
    for line in filedata.splitlines():
        if '<ANYSCRIPT>' in line:
            indent = True
        if '</ANYSCRIPT>' in line:
            indent = False
        line = ' '*4 + line if indent else line
        lines.append(line)
    filedata = "\n".join(lines)
    filedata = re.sub('^\s*<ANYSCRIPT>.?$', '\n.. code-block:: AnyScriptDoc\n' , filedata, flags=re.MULTILINE)
    filedata = re.sub('^.?</ANYSCRIPT>.?$', '' , filedata, flags=re.MULTILINE)
    filedata = re.sub("(`.+[\n]?.+<Downloads/.+>`)(\_\_)", ":download:\g<1>", filedata)
    filedata = re.sub("(`.+[\n]?.+<.+.)(\.docx)(>`)(\_\_)", ":doc:\g<1>\g<3>", filedata)
    with open(rstfile, 'w', encoding='utf-8') as file:
        file.write(filedata)
    print('Converted to rst: ' + ns.file)

aliases['docx2rst'] = locals().pop('_docx2rst')




def _fix_docx_issues(args, stdin=None):
    """ This fixes docx issues with word by 
        first saving them as strict docx format,
        and then back as docx
    """
    import win32com.client, pythoncom, time
    if len(args):
        filenames = [os.path.abspath(f) for f in args]
    else:
        filenames = [os.path.abspath(f) for f in `[^~].*docx`]
    pythoncom.CoInitializeEx(pythoncom.COINIT_APARTMENTTHREADED)
    msword = win32com.client.gencache.EnsureDispatch('Word.Application')
    try:
        for fn in filenames:
            # Save documents as stric xml to rectify any problems
            try: 
                mydoc = msword.Documents.Open(fn)
                mydoc.SaveAs2(FileName=fn,
                   FileFormat=win32com.client.constants.wdFormatStrictOpenXMLDocument,
                   CompatibilityMode=win32com.client.constants.wdCurrent )
            finally:
                mydoc.Close()
        for fn in filenames:
            # Then save again as normal docx
            try: 
                mydoc = msword.Documents.Open(fn)
                mydoc.SaveAs2(FileName=fn,
                   FileFormat=win32com.client.constants.wdFormatDocumentDefault,
                   CompatibilityMode=win32com.client.constants.wdCurrent )
                print('Converted: '+fn)
            finally:
                mydoc.Close()
                
    finally:
        msword.Quit() 
        pythoncom.CoUninitialize()

aliases['fix_docx_issues'] = locals().pop('_fix_docx_issues')






## XDOT setup.
#
#
#
aliases['xdot']='git --git-dir=~/.xdot/ --work-tree=~'